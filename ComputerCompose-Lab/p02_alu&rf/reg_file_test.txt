`timescale 1ns / 1ns

`define DATA_WIDTH 32
`define ADDR_WIDTH 5

module reg_file_test();

	reg clk;
	reg rst;
	reg [`ADDR_WIDTH - 1:0] waddr;
	reg wen;
	reg [`DATA_WIDTH - 1:0] wdata;
	reg [`ADDR_WIDTH - 1:0] raddr1;
	reg [`ADDR_WIDTH - 1:0] raddr2;
	wire [`DATA_WIDTH - 1:0] rdata1;
	wire [`DATA_WIDTH - 1:0] rdata2;

	reg reg_files;//定义寄存器寄存器变量

	initial begin
		//设置初值
		clk = 0;
		rst = 0;
		raddr1 = 0;
		raddr2 = 0;
		waddr = 0;
		wdata = 0;
		wen = 0;
		forever begin//对写使能，复位信号，寄存器堆，读口地址1，读口地址2赋值随机数
		  begin
           	  #10
			rst = {$random} % 2;
			wen = {$random} % 2;
			reg_files = {$random} % 32;
            		raddr1 = {$random} % 32;
			raddr2 = {$random} % 32;
          end          
        end	
	end

	//设置时钟信号
	always begin
		#5 clk = ~clk;
	end

	always @(posedge clk)//时钟信号变化时，给写口地址和写入的数据赋值随机数
	begin
		waddr = {$random} % 32;
		wdata = {$random} % 32;
	end

	reg_file u_reg_file(
		.clk(clk),
		.rst(rst),
		.waddr(waddr),
		.raddr1(raddr1),
		.raddr2(raddr2),
		.wen(wen),
		.wdata(wdata),
		.rdata1(rdata1),
		.rdata2(rdata2)
	);

endmodule