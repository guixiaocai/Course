`timescale 10ns / 1ns

`define DATA_WIDTH 32

module alu_test();

	reg [`DATA_WIDTH - 1:0] A;
	reg [`DATA_WIDTH - 1:0] B;
	reg [2:0] ALUop;
	wire Overflow;
	wire CarryOut;
	wire Zero;
	wire [`DATA_WIDTH - 1:0] Result;

	initial
	begin
		A = 0;
		B = 0;
		ALUop = 0;

		#10;
		ALUop = 3'b000;
		A = 32'hff0000ff;
		B = 32'hffff0000;

		#10;
		ALUop = 3'b001;
		A = 32'hff0000ff;
		B = 32'hffff0000;

		#10;
		ALUop = 3'b010;
		A = 32'h3;
		B = 32'h5;

		#10;
		ALUop = 3'b010;
		A = 32'hfffffffd;
		B = 32'hfffffffb;

		#10;
		ALUop = 3'b110;
		A = 32'ha;
		B = 32'h7;

		#10;
		ALUop = 3'b110;
		A = 0;
		B = 0;

		#10;
		ALUop = 3'b111;
		A = 32'h3;
		B = 32'h5;
		forever begin
			begin
			#10
				ALUop = {$random} % 8;	
				A = {$random} % 32;
				B = {$random} % 32;
			end
		end
	end

	alu u_alu(
		.A(A),
		.B(B),
		.ALUop(ALUop),
		.Overflow(Overflow),
		.CarryOut(CarryOut),
		.Zero(Zero),
		.Result(Result)
	);

endmodule