2.4 
 

2.5
 

2.9
1)	将链表的第二个结点变成头结点，原头结点连接在链表的尾部。
2)	将链表从结点pa与其前置结点之间断开，从结点pb与其前置结点之间断开，并将pb的前置结点指向pa，pa的前置结点指向pb，即将链表从pa和pb处断开，形成两个新的循环链表。

2.11
#define MAXINT 10

int Insertx(int va[], int x)
{
	int i;
	if(va[MAXINT - 1] != '\0')
		return -1;
	for(i = MAXINT - 1; i >= 0 && va[i] > x; i--)	
		va[i + 1] = va[i];
	va[i + 1] = x;
	return 0;		
}

2.12
#include<stdio.h>
int main()
{	
	char *a[] = {"x", "y", "y", "z", "x", "z"};
	char *b[] = {"x", "y", "y", "z", "y", "x", "x", "z"};
	int i, p;
	int a_length, b_length;
	a_length = sizeof(a) / sizeof(0);
	b_length = sizeof(b) / sizeof(0);
	for(i = 0; i < a_length && i < b_length; i++)
		if(a[i] != b[i])
			p = a[i] > b[i] ? 1 : -1;
	if(a_length == b_length)
		p = 0;
	p = a_length > b_length ? 1 : -1;
	if(p == 0) 
		printf("A = B\n");
	else if(p > 0)
		printf("A > B\n");	
	else
		printf("A < B\n");
	return 0;
}

2.15
#include<stdio.h>
#include<stdlib.h>
typedef struct node *ptrnode;
struct node{
	int data;
	ptrnode next;
};
typedef ptrnode List;
List read();
List merge(List L1, List L2);//连接链表
List print(List L);

int main()
{
	List L1, L2, L, ha, hb;
	L1 = read();
	L2 = read();
	L = merge(L1, L2);
	printf("after connecting, the new linklist is:\n");
	print(L);
	return 0;
}

List read()//读取链表
{
	int n, i;
	List L, p, s;	
	printf("please input the length n of the linklist:\n");
	scanf("%d", &n);
	L = (List)malloc(sizeof(struct node));
	L->next = NULL;
	p = L;
	printf("please input n elements of the linklist:\n");
	for(i = 0; i < n; i++)
	{
		s = (List)malloc(sizeof(struct node));
		scanf("%d", &s->data);
		s->next = p->next;
		p->next = s;
		s = p;
	}
	return L;
}

List merge(List L1, List L2)
{
	List L, ha, hb, hc,p;
	ha = L1->next;
	hb = L2->next;
	L = (List)malloc(sizeof(struct node));
	L->next = ha;
	p = ha;
	while(p->next)
		p = p->next;
	p->next = hb;
	return L;
}

List print(List L)
{
	List p;
	p = L->next;
	if(L->next == NULL)
		printf("NULL");
	while(p)
	{
		printf("%d ", p->data);
		p = p->next;
	}
	printf("\n");
}
连接操作的算法的时间复杂度为O(1);

2.18
#include<stdio.h>
#include<stdlib.h>
typedef struct node *ptrnode;
struct node{
	int data;
	ptrnode next;
};
typedef ptrnode List;
List read();
List print(List L);
List DELETE(List L, int i);//删除链表L的第i个元素

int main()
{
	List L;
	int i;
	L = read();
	printf("please input the number i to delete the ith element:\n");
	scanf("%d", &i);
	L = DELETE(L, i);
	printf("after deleting the %dth element, the new linklist is:\n", i);
	print(L);
	return 0;
}

List read()
{
	int n, i;
	List L, p, s;	
	printf("please input the length n of the linklist:\n");
	scanf("%d", &n);
	L = (List)malloc(sizeof(struct node));
	L->next = NULL;
	p = L;
	printf("please input n elements of the linklist:\n");
	for(i = 0; i < n; i++)
	{
		s = (List)malloc(sizeof(struct node));
		scanf("%d", &s->data);
		p->next = s;
		s->next = NULL;
		p = s;
	}
	return L;
}

List DELETE(List L, int i)
{
	List p, q;
	int j;
	p = L;
	for(j = 1; j < i && p->next != NULL; j++)
	{
		p = p->next;
	}
	if(p->next == NULL)
	{
		return NULL;
	}
	q = p->next;
	p-> next = q->next;
	free(q);
	return L;
}

List print(List L)
{
	List p;
	p = L->next;
	if(L->next == NULL)
		printf("NULL");
	while(p)
	{
		printf("%d ", p->data);
		p = p->next;
	}
	printf("\n");
}

2.19
#include<stdio.h>
#include<stdlib.h>
typedef struct node *ptrnode;
struct node{
	int data;
	ptrnode next;
};
typedef ptrnode List;
List read();
List print(List L);
List mydelete(List L, int mink, int maxk);

int main()
{
	List L;
	int mink, maxk;
	L = read();
	printf("please input parameter mink:\n");
	scanf("%d", &mink);
	printf("please input parameter maxk:\n");
	scanf("%d", &maxk);
	if(mink >= maxk)
	{
		printf("Invalid maxk!\n");
		return -1;
	}
	L = mydelete(L, mink, maxk);
	printf("the new linklist is:\n");
	print(L);
	return 0;
}

List read()
{
	int n, i;
	List L, p, s;	
	printf("please input the length n of the linklist:\n");
	scanf("%d", &n);
	L = (List)malloc(sizeof(struct node));
	L->next = NULL;
	p = L;
	printf("please input n elements of the linklist:\n");
	for(i = 0; i < n; i++)
	{
		s = (List)malloc(sizeof(struct node));
		scanf("%d", &s->data);
		p->next = s;
		s->next = NULL;
		p = s;
	}
	return L;
}

List mydelete(List L, int mink, int maxk)
{
	List p, q;
	p = L;
	q = p->next;
	while(q)
	{
		if(q->data > mink && q->data < maxk)
		{
			p->next = q->next;
			free(q);
			q = p->next;
		}
		else
		{
			p = q;
			q = q->next;
		}
	}	
	return L;
}

List print(List L)
{
	List p;
	p = L->next;
	if(L->next == NULL)
		printf("NULL");
	while(p)
	{
		printf("%d ", p->data);
		p = p->next;
	}
	printf("\n");
}

2.22
#include<stdio.h>
#include<stdlib.h>
typedef struct node *ptrnode;
struct node{
	int data;
	ptrnode next;
};
typedef ptrnode List;
List read();
List print(List L);
List reverse(List L);

int main()
{
	List L;
	L = read();
	reverse(L);
	printf("after reverse, the new linklist is:\n");
	print(L);
	return 0;
}

List reverse(List L)
{
	List p, q;
	q = L->next;
	L->next = NULL;
	while(q != NULL)
	{
		p = q;
		q = q->next;
		p->next = L->next;	
		L->next = p;

	}
	return L;
}

List read()
{
	int n, i;
	List L, p, s;	
	printf("please input the length n of the linklist:\n");
	scanf("%d", &n);
	L = (List)malloc(sizeof(struct node));
	L->next = NULL;
	p = L;
	printf("please input n elements of the linklist:\n");
	for(i = 0; i < n; i++)
	{
		s = (List)malloc(sizeof(struct node));
		scanf("%d", &s->data);
		p->next = s;
		s->next = NULL;
		p = s;
	}
	return L;
}

List print(List L)
{
	List p;
	p = L->next;
	if(L->next == NULL)
		printf("NULL");
	while(p)
	{
		printf("%d ", p->data);
		p = p->next;
	}
	printf("\n");
}

2.29
#include<stdio.h>
#define ARRSIZE 50
int delete_abc(int a[], int b[], int c[]);

int main()
{
	//int a[ARRSIZE], b[ARRSIZE], c[ARRSIZE];
	int a[ARRSIZE]={1,2,3,3,5};
	int b[ARRSIZE]={1,4,4,5};
	int c[ARRSIZE]={1,2,3,4};
	//int d[ARRSIZE];
	delete_abc(a,b,c);
	int i;
	for(i = 0; i < ARRSIZE && a[i]; i++)
		printf("%d ", a[i]);
	return 0;
}

int delete_abc(int a[], int b[], int c[])
{
	int a_len, b_len, c_len;//记录数组a, b, c的长度
	int i, j, k, m;
	i = 0; j = 0; k = 0; m = 0;
	int same;	//记录b和c中相同的元素
	a_len = sizeof(a)/sizeof(a[0]);
	b_len = sizeof(b)/sizeof(b[0]);
	c_len = sizeof(c)/sizeof(c[0]);

	while(i < a_len && j < b_len && k < c_len)
	{
		if(b[j] < c[k])
			j++;
		else if(b[j] > c[k])
			k++;
		else
		{
			same = b[j];	
			while(b[j] == same)
				j++;
			while(c[k] == same)
				k++;
			while(a[i] < same && i < a_len)
				a[m++] = a[i++];
			while(a[i] == same && i < a_len)
				i++;
		}		
	}
	while(i < a_len)
		a[m++] = a[i++];
	return a;
}
算法的时间复杂度为O(n2).

2.38
#include<stdio.h>
#include<stdlib.h>

typedef struct Dnode *ptrnode;
struct Dnode{
	int data;
	ptrnode next;
	ptrnode prior;
	int freq;
};
typedef ptrnode Dlist;

Dlist read();
Dlist print(Dlist L);
Dlist freq_locate(Dlist L, int x);

int main()
{
	Dlist L;
	int x;
	L = read();
	printf("input x:\n");
	scanf("%d", &x);
	freq_locate(L, x);
	print(L);
	return 0;
}

Dlist freq_locate(Dlist L, int x)
{
	Dlist p, q;
	p = L->next;
	while(p->data != x && p != L)
		p = p->next;
	if(p == L)
		return NULL;
	p->freq++;
	q = p->prior;
	while(q->freq <= p->freq && q != L)
		q = q->prior;
	if(q != p->prior)
	{
		p->next->prior = p->prior;
		p->prior->next = p->next;
		q->prior->next = p;
		p->prior = q->prior;
		q->next = p;
		p->prior = q;
	}
	return L;
}

Dlist read()
{
	int n, i;
	Dlist L, p, s;	
	printf("please input the length n of the linklist:\n");
	scanf("%d", &n);
	L = (Dlist)malloc(sizeof(struct Dnode));
	L->next = NULL;
	L->prior = NULL;
	L->freq = 0;
	p = L;
	printf("please input n elements of the linklist:\n");
	for(i = 0; i < n; i++)
	{
		s = (Dlist)malloc(sizeof(struct Dnode));
		scanf("%d", &s->data);
		s->freq = 0;
		p->next = s;
		s->prior = p;
		s->next = NULL;
		p = s;
	}
	s->next = L;
	L->prior = s;
	return L;
}

Dlist print(Dlist L)
{
	Dlist p;
	p = L->next;
	if(L->next == NULL)
		printf("NULL");
	while(p != L && p)
	{
		printf("%d ", p->data);
		p = p->next;
	}
	printf("\n");
}

2.41
#include<stdio.h>
#include<stdlib.h>
typedef struct PolyNode{
	int exp;
	int coef;
	struct PolyNode *next;
	struct PolyNode *prior;
}PolyNode, *PolyLink;
typedef PolyLink Linkedpoly;

Linkedpoly read();//读取多项式
Linkedpoly print(Linkedpoly L);//打印链表
Linkedpoly poly_dif(Linkedpoly L);//求导

int main()
{
	Linkedpoly L;
	int x;
	L = read();
	poly_dif(L);
	print(L);
	return 0;
}

Linkedpoly poly_dif(Linkedpoly L)
{
	Linkedpoly p, q, r;
	q = L;
	p = L->next;
	while(p != L)
	{
		if(p->exp == 0)
		{
			r = p;
			p = p->next;
			q->next = p;
			free(r);
			
		}
		else
		{
			p->coef = p->coef * p->exp;
			p->exp--;
			q = p;
			p = p->next;
		}
	}
}

Linkedpoly read()
{
	int n, i;
	Linkedpoly L, p, s;	
	printf("please input the length n of the polynomial:\n");
	scanf("%d", &n);
	L = (Linkedpoly)malloc(sizeof(struct PolyNode));
	L->next = NULL;
	L->prior = NULL;
	p = L;
	for(i = 0; i < n; i++)
	{
		s = (Linkedpoly)malloc(sizeof(struct PolyNode));
		p->next = s;
		s->prior = p;
		s->next = NULL;
		p = s;
	}
	s->next = L;
	L->prior = s;

	printf("please input %d expressions of the polynomial:\n", n);
	s = L->next;
	for(i = 0; i < n; i++)
	{		
		scanf("%d", &s->exp);
		s = s->next;
	}

	printf("please input %d coefficients of the poynomial:\n", n);
	s = L->next;
	for(i = 0; i < n; i++)
	{		
		scanf("%d", &s->coef);
		s = s->next;
	}

	return L;
}

Linkedpoly print(Linkedpoly L)
{
	Linkedpoly p;
	p = L->next;
	if(L->next == NULL)
		printf("NULL");
	while(p && p->next != L)
	{
		p->exp == 0 ? printf("%d + ", p->coef) : printf("%dx^%d + ", p->coef, p->exp);
		p = p->next;
	}
	p->exp == 0 ? printf("%d", p->coef) : printf("%dx^%d", p->coef, p->exp);
	printf("\n");
}


